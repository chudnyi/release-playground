name: Release
on:
  workflow_dispatch:
permissions:
  contents: write
  pull-requests: write
jobs:
  release_please:
    name: "Release Please"
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - uses: google-github-actions/release-please-action@v4
        id: release
        with:
          release-type: node

  build:
    name: "Build release binaries"
    needs: ["release_please"]
    if: ${{ needs.release_please.outputs.release_created == 'true' }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: ['self-hosted', 'macOS', 'ARM64']
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: pkgxdev/setup@v1
        with:
          version: "1.1.6"
      - uses: pkgxdev/brewkit/actions/setup-codesign@v0
        if: endsWith(matrix.target, '-darwin')
        with:
          p12-file-base64: ${{ secrets.APPLE_CERTIFICATE_P12 }}
          p12-password: ${{ secrets.APPLE_CERTIFICATE_P12_PASSWORD }}

      - name: Build release binary
        run: ./scripts/release.sh build ${{ matrix.target }}

      # codesign always fails for deno binaries, even though it
      # signs fine. See https://github.com/denoland/deno/issues/575
      - name: Code sign release macOS binary
        if: endsWith(matrix.target, '-darwin')
        run: ./scripts/release.sh macos_codesign ${{ matrix.target }}
        env:
          APPLE_IDENTITY: ${{ secrets.APPLE_IDENTITY }}

      - name: Archive release binary
        run: ./scripts/release.sh archive ${{ matrix.target }}

      - name: Upload release archive to artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./scripts/release.sh deploy_release ${{ matrix.target }} ${{ needs.release_please.outputs.tag_name }}
